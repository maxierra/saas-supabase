import { createServerClient } from '@supabase/ssr';
import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { checkSubscriptionStatus } from './utils/subscription';

console.log('üîß Middleware cargado correctamente');

// Credenciales para el cliente an√≥nimo (autenticaci√≥n)
const supabaseUrl = 'https://crtgzjzzqrxyizraqpyk.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNydGd6anp6cXJ4eWl6cmFxcHlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNDYwMDIsImV4cCI6MjA1NjkyMjAwMn0.zQu06oF4VbJ0P7I_jtAEdnjC_RUdosnpRsjvUvgBEJ0';

// Cliente con rol de servicio para operaciones privilegiadas
const supabaseAdmin = createClient(
  supabaseUrl,
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNydGd6anp6cXJ4eWl6cmFxcHlrIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MTM0NjAwMiwiZXhwIjoyMDU2OTIyMDAyfQ.22ZOF3U4NQ6cdbDTNFi367OG7oi7ocumixatwLICF10'
);

// Nombre base de la cookie de autenticaci√≥n
const AUTH_COOKIE_NAME = 'sb-crtgzjzzqrxyizraqpyk-auth-token';

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Si es una ruta p√∫blica o est√°tica, permitir acceso inmediatamente
  if (isPublicRoute(pathname)) {
    return NextResponse.next();
  }

  // Crear una respuesta base
  let response = NextResponse.next();

  try {
    // Verificar si existe la cookie de autenticaci√≥n
    const authCookie = request.cookies.get(AUTH_COOKIE_NAME);
    if (!authCookie) {
      return NextResponse.redirect(new URL('/login', request.url));
    }

    // Crear el cliente de Supabase
    const supabase = createServerClient(
      supabaseUrl,
      supabaseAnonKey,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value;
          },
          set(name: string, value: string, options: any) {
            response.cookies.set(name, value, {
              ...options,
              httpOnly: true,
              secure: process.env.NODE_ENV === 'production',
              sameSite: 'lax',
              path: '/',
              maxAge: 7 * 24 * 60 * 60 // 7 d√≠as
            });
          },
          remove(name: string, options: any) {
            response.cookies.set(name, '', { ...options, maxAge: 0, path: '/' });
          },
        },
      }
    );

    // Verificar si hay una sesi√≥n
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    // Log detallado del estado de la sesi√≥n
    console.log('üë§ Middleware - Estado de sesi√≥n:', {
      activa: session ? 'S√≠' : 'No',
      error: sessionError ? sessionError.message : 'No',
      userId: session?.user?.id || 'N/A',
      cookiePresente: authCookie ? 'S√≠' : 'No'
    });

    // Si no hay sesi√≥n, redirigir a login
    if (!session) {
      console.log('‚ùå Middleware - Sin sesi√≥n, redirigiendo a login');
      const loginUrl = new URL('/login', request.url);
      return NextResponse.redirect(loginUrl);
    }

    // Si es una ruta protegida, verificar suscripci√≥n
    if (isProtectedRoute(pathname)) {
      try {
        const userId = session.user.id;
        console.log('üîí Middleware - Verificando suscripci√≥n para UID:', userId);
        
        // Obtener la suscripci√≥n directamente
        console.log('üìë Middleware - Buscando suscripci√≥n para:', userId);
        const response = await supabaseAdmin
          .from('suscripciones')
          .select('*')
          .eq('uid', userId);

        console.log('üìë Middleware - DEBUG - Respuesta completa:', response);
        
        const { data: subscriptions, error: subError } = response;
        const subscription = subscriptions?.[0];
        console.log('üìë Middleware - DEBUG - Suscripci√≥n encontrada:', subscription);

        if (subError) {
          console.error('‚ùå Middleware - Error al verificar suscripci√≥n:', subError);
          return NextResponse.redirect(new URL('/subscription?error=true', request.url));
        }

        if (!subscription || subscription.estado === 'inactive') {
          console.log('‚ö†Ô∏è Middleware - Suscripci√≥n no v√°lida, redirigiendo a /subscription');
          return NextResponse.redirect(new URL('/subscription?expired=true', request.url));
        }

        console.log('‚úÖ Middleware - Suscripci√≥n activa encontrada, permitiendo acceso');
        return response;
      } catch (error) {
        console.error('‚ùå Middleware - Error al verificar suscripci√≥n:', error);
        return NextResponse.redirect(new URL('/subscription?error=true', request.url));
      }
    }

    // Si no es una ruta protegida y hay sesi√≥n, permitir acceso
    console.log('‚úÖ Middleware - Permitiendo acceso a ruta no protegida');
    return response;
  } catch (error) {
    console.error('‚ùå Error en el middleware:', error);
    // En caso de error, permitir el acceso solo a rutas p√∫blicas
    if (!isPublicRoute(pathname)) {
      console.log('‚ùå Redirigiendo a login por error');
      return NextResponse.redirect(new URL('/login', request.url));
    }
    console.log('‚úÖ Permitiendo acceso a ruta p√∫blica a pesar del error');
    return response;
  }
}

// Rutas que no requieren autenticaci√≥n
function isPublicRoute(pathname: string) {
  // Rutas p√∫blicas est√°ticas
  const publicRoutes = [
    '/login',
    '/register',
    '/reset-password',
    '/subscription'
  ];

  // Recursos est√°ticos y API
  const staticPaths = [
    '/_next/',
    '/favicon.ico',
    '/api/',
    '.css',
    '.js',
    '.png',
    '.jpg',
    '.svg'
  ];

  // Verificar si es una ruta p√∫blica
  if (publicRoutes.some(route => pathname.startsWith(route))) {
    return true;
  }

  // Verificar si es un recurso est√°tico
  if (staticPaths.some(path => pathname.includes(path))) {
    return true;
  }

  return false;
}

// Rutas que requieren verificaci√≥n de suscripci√≥n
function isProtectedRoute(pathname: string) {
  // Normalizar el pathname
  const normalizedPath = pathname.toLowerCase();

  // Si es una ruta p√∫blica, no est√° protegida
  if (isPublicRoute(normalizedPath)) {
    return false;
  }

  // Rutas protegidas est√°ndar
  const protectedPaths = ['dashboard', 'productos', 'ventas', 'reportes', 'caja'];
  
  // Verificar rutas din√°micas con UID
  const uidPattern = /^\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}(\/|$)/;
  const isUidRoute = uidPattern.test(normalizedPath);

  // Una ruta est√° protegida si:
  // 1. Es una ruta con UID v√°lido, o
  // 2. Contiene uno de los paths protegidos
  return isUidRoute || protectedPaths.some(path => normalizedPath.includes(`/${path}`));
}

export const config = {
  matcher: [
    // Incluir todas las rutas excepto recursos est√°ticos
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ]
};
