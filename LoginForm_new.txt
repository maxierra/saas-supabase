'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { supabase } from '../../lib/supabase';
import { checkSubscriptionStatus } from '../../utils/subscription';

interface LoginFormProps {
  message?: string | null;
}

const LoginForm: React.FC<LoginFormProps> = ({ message }) => {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [showResetForm, setShowResetForm] = useState<boolean>(false);
  const [resetLoading, setResetLoading] = useState<boolean>(false);
  const [resetMessage, setResetMessage] = useState<string | null>(null);
  const router = useRouter();
  const origin = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        throw error;
      }

      if (data.user) {
        // Verificar el estado de la suscripción
        const subscriptionStatus = await checkSubscriptionStatus(data.user.id);
        console.log('Estado de suscripción:', subscriptionStatus);
        
        if (!subscriptionStatus.active) {
          // Si la suscripción no está activa, redirigir a la página de suscripción
          router.push('/subscription?expired=true');
          return;
        }
        
        // Si la suscripción está activa, redirigir al dashboard
        router.push(`/${data.user.id}/dashboard`);
      }
    } catch (error: unknown) {
      setError((error as Error).message || 'Error al iniciar sesión');
    } finally {
      setLoading(false);
    }
  };

  // ... resto del código del componente se mantiene igual ...
